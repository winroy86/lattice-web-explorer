<?php
/**
 * Roy Winter's Cubic-Diamond-Lattice Theory WordPress Theme Functions
 * 
 * This file contains WordPress-specific functions for the converted theme.
 * Generated by Lovable export process.
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Theme Setup
 */
function cdlt_theme_setup() {
    // Add theme support for various features
    add_theme_support('post-thumbnails');
    add_theme_support('title-tag');
    add_theme_support('html5', array('search-form', 'comment-form', 'comment-list', 'gallery', 'caption'));
    add_theme_support('customize-selective-refresh-widgets');
    
    // Register navigation menus
    register_nav_menus(array(
        'primary' => __('Primary Menu', 'cdlt-theme'),
        'footer' => __('Footer Menu', 'cdlt-theme'),
        'theory-nav' => __('Theory Navigation', 'cdlt-theme'),
    ));
}
add_action('after_setup_theme', 'cdlt_theme_setup');

/**
 * Register Custom Post Types
 */
function cdlt_register_post_types() {
    // Theory Pages
    register_post_type('theory', array(
        'labels' => array(
            'name' => 'Theory Pages',
            'singular_name' => 'Theory Page',
            'add_new_item' => 'Add New Theory Page',
            'edit_item' => 'Edit Theory Page',
        ),
        'public' => true,
        'has_archive' => true,
        'supports' => array('title', 'editor', 'thumbnail', 'excerpt'),
        'menu_icon' => 'dashicons-chart-line',
        'rewrite' => array('slug' => 'theory'),
    ));
    
    // Courses
    register_post_type('course', array(
        'labels' => array(
            'name' => 'Courses',
            'singular_name' => 'Course',
            'add_new_item' => 'Add New Course',
            'edit_item' => 'Edit Course',
        ),
        'public' => true,
        'has_archive' => true,
        'supports' => array('title', 'editor', 'thumbnail', 'excerpt'),
        'menu_icon' => 'dashicons-book',
        'rewrite' => array('slug' => 'courses'),
    ));
    
    // Lessons
    register_post_type('lesson', array(
        'labels' => array(
            'name' => 'Lessons',
            'singular_name' => 'Lesson',
            'add_new_item' => 'Add New Lesson',
            'edit_item' => 'Edit Lesson',
        ),
        'public' => true,
        'supports' => array('title', 'editor', 'thumbnail', 'page-attributes'),
        'menu_icon' => 'dashicons-welcome-learn-more',
        'hierarchical' => true,
        'rewrite' => array('slug' => 'lessons'),
    ));
    
    // Publications
    register_post_type('publication', array(
        'labels' => array(
            'name' => 'Publications',
            'singular_name' => 'Publication',
            'add_new_item' => 'Add New Publication',
            'edit_item' => 'Edit Publication',
        ),
        'public' => true,
        'has_archive' => true,
        'supports' => array('title', 'editor', 'thumbnail', 'excerpt'),
        'menu_icon' => 'dashicons-media-document',
        'rewrite' => array('slug' => 'publications'),
    ));
}
add_action('init', 'cdlt_register_post_types');

/**
 * Register Widget Areas
 */
function cdlt_widgets_init() {
    register_sidebar(array(
        'name'          => 'Theory Sidebar',
        'id'            => 'theory-sidebar',
        'description'   => 'Sidebar for theory explorer pages',
        'before_widget' => '<div class="widget %2$s">',
        'after_widget'  => '</div>',
        'before_title'  => '<h3 class="widget-title">',
        'after_title'   => '</h3>',
    ));
    
    register_sidebar(array(
        'name'          => 'Footer 1',
        'id'            => 'footer-1',
        'description'   => 'First footer widget area',
        'before_widget' => '<div class="widget %2$s">',
        'after_widget'  => '</div>',
        'before_title'  => '<h4 class="widget-title">',
        'after_title'   => '</h4>',
    ));
    
    register_sidebar(array(
        'name'          => 'Footer 2',
        'id'            => 'footer-2',
        'description'   => 'Second footer widget area',
        'before_widget' => '<div class="widget %2$s">',
        'after_widget'  => '</div>',
        'before_title'  => '<h4 class="widget-title">',
        'after_title'   => '</h4>',
    ));
    
    register_sidebar(array(
        'name'          => 'Footer 3',
        'id'            => 'footer-3',
        'description'   => 'Third footer widget area',
        'before_widget' => '<div class="widget %2$s">',
        'after_widget'  => '</div>',
        'before_title'  => '<h4 class="widget-title">',
        'after_title'   => '</h4>',
    ));
}
add_action('widgets_init', 'cdlt_widgets_init');

/**
 * Enqueue Scripts and Styles
 */
function cdlt_scripts() {
    // Theme styles
    wp_enqueue_style('cdlt-style', get_stylesheet_uri());
    
    // MathJax for equations
    wp_enqueue_script('mathjax', 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js', array(), '3.2.0', true);
    
    // Three.js for 3D models
    wp_enqueue_script('threejs', 'https://cdn.jsdelivr.net/npm/three@0.178.0/build/three.min.js', array(), '0.178.0', true);
}
add_action('wp_enqueue_scripts', 'cdlt_scripts');

/**
 * 3D Model Shortcode
 */
function cdlt_3d_model_shortcode($atts) {
    $atts = shortcode_atts(array(
        'src' => '',
        'caption' => '',
        'autorotate' => 'true',
        'camera' => '5,5,5',
    ), $atts);
    
    $camera_position = explode(',', $atts['camera']);
    
    ob_start();
    ?>
    <div class="interactive-3d-container w-full h-96 theory-card">
        <div class="w-full h-full bg-gradient-to-br from-background to-neutral-light rounded-lg overflow-hidden">
            <div id="threejs-container-<?php echo uniqid(); ?>" 
                 data-src="<?php echo esc_url($atts['src']); ?>"
                 data-autorotate="<?php echo esc_attr($atts['autorotate']); ?>"
                 data-camera="<?php echo esc_attr($atts['camera']); ?>"
                 class="w-full h-full">
                <div class="w-full h-full flex items-center justify-center bg-neutral-light">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-cobalt"></div>
                </div>
            </div>
        </div>
        <?php if (!empty($atts['caption'])): ?>
            <p class="text-sm text-muted-foreground mt-3 text-center font-inter">
                <?php echo esc_html($atts['caption']); ?>
            </p>
        <?php endif; ?>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('3d-model', 'cdlt_3d_model_shortcode');

/**
 * Equation Block Shortcode
 */
function cdlt_equation_shortcode($atts, $content = null) {
    $atts = shortcode_atts(array(
        'display' => 'true',
        'caption' => '',
    ), $atts);
    
    $display = $atts['display'] === 'true';
    $latex = $content ? $content : '';
    
    ob_start();
    ?>
    <div class="equation-block">
        <div class="text-center <?php echo $display ? 'text-lg' : 'inline'; ?>">
            <?php echo $display ? '\\[' . $latex . '\\]' : '\\(' . $latex . '\\)'; ?>
        </div>
        <?php if (!empty($atts['caption'])): ?>
            <p class="text-sm text-muted-foreground mt-2 text-center font-inter">
                <?php echo esc_html($atts['caption']); ?>
            </p>
        <?php endif; ?>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('equation', 'cdlt_equation_shortcode');

/**
 * ACF Field Groups
 */
function cdlt_register_acf_fields() {
    if (function_exists('acf_add_local_field_group')) {
        // Theory Page Fields
        acf_add_local_field_group(array(
            'key' => 'group_theory_page',
            'title' => 'Theory Page Fields',
            'fields' => array(
                array(
                    'key' => 'field_theory_equation',
                    'label' => 'Main Equation',
                    'name' => 'theory_equation',
                    'type' => 'textarea',
                    'instructions' => 'Enter LaTeX equation (without \\[ \\] delimiters)',
                ),
                array(
                    'key' => 'field_theory_3d_model',
                    'label' => '3D Model Path',
                    'name' => 'theory_3d_model',
                    'type' => 'text',
                    'instructions' => 'Path to GLB model file (e.g., /models/lattice.glb)',
                ),
                array(
                    'key' => 'field_theory_model_caption',
                    'label' => '3D Model Caption',
                    'name' => 'theory_model_caption',
                    'type' => 'text',
                ),
            ),
            'location' => array(
                array(
                    array(
                        'param' => 'post_type',
                        'operator' => '==',
                        'value' => 'theory',
                    ),
                ),
            ),
        ));
        
        // Course Fields
        acf_add_local_field_group(array(
            'key' => 'group_course',
            'title' => 'Course Fields',
            'fields' => array(
                array(
                    'key' => 'field_course_duration',
                    'label' => 'Course Duration',
                    'name' => 'course_duration',
                    'type' => 'text',
                    'instructions' => 'e.g., "4 weeks", "Self-paced"',
                ),
                array(
                    'key' => 'field_course_difficulty',
                    'label' => 'Difficulty Level',
                    'name' => 'course_difficulty',
                    'type' => 'select',
                    'choices' => array(
                        'beginner' => 'Beginner',
                        'intermediate' => 'Intermediate',
                        'advanced' => 'Advanced',
                    ),
                ),
            ),
            'location' => array(
                array(
                    array(
                        'param' => 'post_type',
                        'operator' => '==',
                        'value' => 'course',
                    ),
                ),
            ),
        ));
    }
}
add_action('acf/init', 'cdlt_register_acf_fields');

/**
 * Custom Admin Styles
 */
function cdlt_admin_styles() {
    echo '<style>
        .acf-field[data-name="theory_equation"] textarea {
            font-family: monospace;
            font-size: 14px;
        }
        .post-type-theory .editor-post-title__input {
            font-family: "Merriweather", serif;
        }
    </style>';
}
add_action('admin_head', 'cdlt_admin_styles');

/**
 * Theme Customizer
 */
function cdlt_customize_register($wp_customize) {
    // Colors Section
    $wp_customize->add_section('cdlt_colors', array(
        'title' => 'CDLT Colors',
        'priority' => 30,
    ));
    
    $wp_customize->add_setting('cobalt_accent_color', array(
        'default' => '#0066ff',
        'sanitize_callback' => 'sanitize_hex_color',
    ));
    
    $wp_customize->add_control(new WP_Customize_Color_Control($wp_customize, 'cobalt_accent_color', array(
        'label' => 'Cobalt Accent Color',
        'section' => 'cdlt_colors',
        'settings' => 'cobalt_accent_color',
    )));
    
    // Features Section
    $wp_customize->add_section('cdlt_features', array(
        'title' => 'CDLT Features',
        'priority' => 40,
    ));
    
    $wp_customize->add_setting('enable_3d_models', array(
        'default' => true,
        'sanitize_callback' => 'wp_validate_boolean',
    ));
    
    $wp_customize->add_control('enable_3d_models', array(
        'label' => 'Enable 3D Models',
        'section' => 'cdlt_features',
        'type' => 'checkbox',
    ));
    
    $wp_customize->add_setting('enable_mathjax', array(
        'default' => true,
        'sanitize_callback' => 'wp_validate_boolean',
    ));
    
    $wp_customize->add_control('enable_mathjax', array(
        'label' => 'Enable MathJax Equations',
        'section' => 'cdlt_features',
        'type' => 'checkbox',
    ));
}
add_action('customize_register', 'cdlt_customize_register');

/**
 * Add custom CSS variables based on customizer settings
 */
function cdlt_custom_css_vars() {
    $cobalt_color = get_theme_mod('cobalt_accent_color', '#0066ff');
    
    echo '<style type="text/css">
        :root {
            --cobalt: ' . $cobalt_color . ';
        }
    </style>';
}
add_action('wp_head', 'cdlt_custom_css_vars');
?>